#######################################################################
							1 to 25 Questions
#######################################################################

1. Write a shell script that lists all files in a specified directory and saves the output to a text file.

SOLUTION:-
 
#!/bin/bash

DNAME=$1

if [[ $# != "1" ]]
then
    echo -e "One Argument is Require"
    echo "Usage: $0 [Directory Name]"
    exit
fi

ls -l|find $DNAME -type f > input01.txt
EXTS=$?
if [[ $EXTS -eq "0" ]]
then
    echo -e "Directory exists and save output to input.txt"
else
    echo -e "Directory does not exist"
fi 

===========================================================================

2. Write a shell script to monitor disk usage and send an email alert if usage exceeds a specified threshold.

SOLUTION:-

#!/bin/bash

EMAIL_ID=$1
THRESHOLD=$2
DSK_U=`df -h | grep -v "/dev/sdc" | awk '{print $5}' |sed -n 3p |cut -d'%' -f1`

if [[ $# != "2" ]]
then
    echo -e "Two Argument is require"
    echo "Usage: $0 [EMAIL_ID THRESHOLD]"
    exit 1
fi 

function Mail () 
{ 
echo -e "
Hello All
    This is system generated email, do not reply to this email.
 
    Partitions on host `/bin/hostname` is reached to threshold. 
    Kindly take necessary action ASAP to avoid future inconvenience.

    Server Name : - `hostname` 
    Server IP :- `ifconfig | grep inet | head -n 1 | awk '{print $2}'`

Thank & Regards
XYZ"
} 

if [[ $DSK_U -ge $THRESHOLD ]]
then
    echo -e "Storage is full $DSK_U%" |
    Mail |mail -s "Disk usage alert" $EMAIL_ID
else
    echo -e "Disk storage is fine"
fi 

===========================================================================

3. Write a shell script that checks whether a specified service is running and restarts it if it's not running.

SOLUTION:-

#!/bin/bash

S_NAME=$1

if [[ $# == "1" ]]
then
    echo -e "One Argument is Require"
    echo "Usage: $0 [Service NAME]"
    exit
fi

systemctl status $S_NAME
EXTS=$?

if [[ $EXTS == "0" ]]
then
    echo -e "Service is running"
else
    echo -e "Restart service"
    systemctl restart $S_NAME
fi 

===========================================================================

4. Write a script that backs up a specified directory to a remote server using 'rsync' and SSH.

SOLUTION:-

#!/bin/bash

SFILE_N=$1
U_NM=$2
IP=$3
DES=$4


if [[ $DIR_N != "4" ]]
then
    echo -e "Four Argument is Require"
    echo "Usage: $0 [Source File Name User Name IP Address Destination path]"
    exit
fi

if [[ -f $SFILE_N ]]
then
    rsync -avzh $SFILE_N $U_NM@$IP:$DES
else
    echo -e "File not found"
fi 

===========================================================================

5. Write a shell script that checks for software updates and installs them automatically.

SOLUTION:-

#!/bin/bash

yum list updates
EXTS=$?

if [[ $EXTS -gt "0" ]] 
then
    echo -e "Software is updating and installing"
    yum update -y 
else
    echo -e "Software is Updated"
fi 

===========================================================================

6. Write a script that compresses and archives log files older than a certain number of days.

SOLUTION:-

#!/bin/bash

DAY=$1  
LOG_FI=/var/log

if [[ $# != "1" ]]
then
    echo "One Argument is require"
    echo "Usage: $0 [DAY]"
    exit
fi 

find $LOG_FI -type f -mtime +$DAY
EXT_ST=$?

if [[ $EXT_ST == 0]]
then
    echo -e "Compressing and archiving log files older than $DAY"
    tar -czvf backup.tar.gz $LOG_FI
else
    echo -e "$DAY files are not Available"
fi

===========================================================================

7. Write a shell script that generates a report of system resource usage, including CPU, memory, and disk usage.

SOLUTION:-

#!/bin/bash

CP=`mpstat`
EXT=$?
MEMO=`vmstat`
EXTS=$?
DSK=`df -h`
EXT_ST=$?

if [[ $EXT == "0" ]]
then
    echo -e "Usage of CPU is \n$CP"
        if [[ $EXTS == "0" ]]
        then
            echo -e "\nUsage of Memory is is \n$MEMO"
        fi
            if [[ $EXT_ST == "0" ]]
            then
                echo -e "\nUsage of Disk is \n$MEMO"
            fi
fi 

===========================================================================

8. Write a script that monitors a list of websites and sends an email notification if any of them are down.

SOLUTION:-

#!/bin/bash

DIR_N=$1
FILE_N=$2
EMAIL_ID=$3

if [[ $# != "3" ]]
then
    echo -e "Three Argument is Require"
    echo "Usage: $0 [Directory Name File Name EMAIL_ID]"
    exit 1
fi

function Mail () 
{ 
echo -e "
Hello All
    This is system generated email, do not reply to this email.
 
    This mail is send to inform about website server is down.
    Kindly take necessary action ASAP to avoid future inconvenience.

    Server Name : - `hostname` 
    Server IP :- `ifconfig | grep inet | head -n 1 | awk '{print $2}'`

Thank & Regards
XYZ"
} 

if [[ -d $DIR_N ]]
then
    echo -e "Directory is present in system"
    FILE1=`find $DIR_N -type f -name $FILE_N`
else
    echo -e "Directory is not present in system"
fi 

while read C1
do 
    echo -e "Checking if website is up or down"
    WEB=`curl -I "https://$C1" 2>&1 | awk '/HTTP\// {print $2}'`
        if [[ $WEB == "200" ]]
        then
            echo -e "Website is up"
        else
            echo -e "Website is down"
            Mail |mail -s "Website is down" $EMAIL_ID
        fi
done < $FILE1 

===========================================================================

9. Write a shell script that scans a directory for files matching a certain pattern and deletes them.

SOLUTION:-

#!/bin/bash

DIR_N=$1
PATTR=$2

if [[ $# != "2" ]]
then
    echo "Two Argument Required"
    echo "Usage: $0 [Directory Name Pattern]"
    exit
fi

if [[ -d $DIR_N ]]
then
    find $DIR_N -type f -name $PATTR -delete
    EXT_ST=$?
        if [[ $EXT_ST == 0 ]]
        then
            echo -e "File of given patter $PATTR is Delete"
        else
            echo -e "File of given patter $PATTR is not Delete"
        fi
else
    echo -e "Directory is not found"
fi

===========================================================================

10. Write a shell script that fetches data from an AWS EC2 API and processes the JSON response to print instance IDs and its public
    and private IP address.

SOLUTION:-

#!/bin/bash

INS_ID=$1
aws --version
EXT_ST=$?

if [[ $# != "1" ]]
then
    echo -e "One Argument is require"
    echo -e "Usage: $0 [Instance ID]"
    exit 1
fi 

if [[ $EXT_ST == "0" ]]
then
    echo -e "aws cli is present in system"
else
    echo -e "aws cli is not present in system"
fi

aws ec2 describe-instances --instance-ids $INS_ID |grep -i "IP" > input.json
EXTS=$?

if [[ $EXTS == "0" ]]
then
    echo -e "Fetching data from an AWS EC2 API and output in input.json file"
fi 

===========================================================================

11. Write a shell script that adds new users to the system based on a list of names in a CSV file.

SOLUTION:-

#!/bin/bash

DIR_NA=$1
CSV_F=$2

if [[ $# != "2" ]]
then
    echo -e "Two Argument is Require"
    echo "Usage: $0 [Directory Name CSV_File Name]"
    exit 1
fi

if [[ -d $DIR_NA ]]
then
    echo -e "Directory is present in system"
    FILE=`find $DIR_NA -type f -name $CSV_F`
else
    echo -e "Directory is not present in system"
fi 

while read C1
do
    useradd C1
done < $FILE

===========================================================================

12. Write a script that periodically syncs a local directory with a remote server using 'rsync' and 'cron'.

SOLUTION:-

#!/bin/bash

DES=/root/admin/
SOR=/root/prod/test001.txt

if [ -f $SOR ];
then
    rsync -avzh $SOR root@192.168.1.199:$DES
else
    echo -e "File not found"
fi

===========================================================================

13. Write a shell script that automates the process of setting up a new virtual host on a web server.

SOLUTION:-

#!/bin/bash

DIR_N=$1
FILE_N=$2
CONTENT=$3

if [[ $# != "3" ]]
then
    echo -e "Three Argument is Require"
    echo -e "Usage: $0 [Directory name File Name Content to put in file]"
dpkg --list | grep apache2 
EXT_ST=$?

if [[ $EXT_ST == "0" ]]
then
    echo -e "package is install in system"
else
    echo -e "package is not install in system"
    apt install apache2 -y > /dev/null 2>&1
fi

STAT=systemctl is-active apache2

if [[ $STAT == "active" ]]
then
    echo -e "apache2 service is active"
    echo -e "$CONTENT" > index.html
else
    echo -e "apache2 service is inactive"
    systemctl start apache2
fi 

===========================================================================

14. Write a script that compares two directories and reports any differences in their content.

SOLUTION:-

#!/bin/bash

DIR_01=$1
DIR_02=$2

if [[ $# != "2" ]]
then
    echo "Two argument require"
    echo "Usage: $0 [first Directory Name Second Directory Name]"
    exit
fi

if [[ -d $DIR_01 ]]&&[[ -d $DIR_02 ]]
then
    echo -e "Directory is present"
    diff $DIR_01 $DIR_02 
else
    echo -e "Directory not found"
fi 

===========================================================================

15. Write a shell script that finds and lists all files in a directory tree that have not been accessed in a specified number of days.

SOLUTION:-

#!/bin/bash

DIR_1=$1
DAYS=$2

if [[ $# != "2" ]]
then
    echo -e "Two Argument is require"
    echo "Usage: $0 [Directory Name DAYS]"
    exit
fi

if [[ -d $DIR_1 ]]
then
    echo -e "Lists of files that have not been accessed in a $DAYS number of days"
    find $DIR_1 -type f -mtime -$DAYS
else
    echo -e "Directory not found"
fi

===========================================================================

16. Write a shell script that automatically organizes files in a directory based on their file types (e.g., images, documents, audio files).

SOLUTION:-

#!/bin/bash

DIR_N=$1
PATT1=$2
PATT2=$3
PATT3=$4

if [[ $# != "4" ]]
then
    echo -e "Four Argument is Require"
    echo "Usage: $0 [Directory Name first Directory Name Second Directory Name Third Directory Name]"
    exit 1
fi

if [[ -d $DIR_N ]]
then
    echo -e "Directory is present in system"
        if [[ $PATT1 == ".txt" ]]
        then
            echo -e "File .txt Exist in $DIR_N"
            mkdir ADMIN01
            echo -e "Moving .txt files to ADMIN01 "
            find $DIR_N -type f -iname *$PATT1 | mv $DIR_N/*.txt ADMIN01/
        else
            echo -e "File .txt not Exist in $DIR_N"
        fi  
                if [[ $PATT2 == ".jpg" ]]
                then
                    echo -e "File .jpg Exist in $DIR_N"
                    mkdir ADMIN02
                    echo -e "Moving .jpg files to ADMIN02 "
                    find $DIR_N -type f -iname *$PATT2 | mv $DIR_N/*.jpg ADMIN02/
                else
                    echo -e "File .jpg not Exist in $DIR_N"
                fi 
                        if [[ $PATT3 == ".mp3" ]]
                        then
                            echo -e "File .mp3 Exist in $DIR_N"
                            mkdir ADMIN03
                            echo -e "Moving .mp3 files to ADMIN03 "
                            find $DIR_N -type f -iname *$PATT3| mv $DIR_N/*.mp3 ADMIN03/
                        else
                            echo -e "File .mp3 not Exist in $DIR_N"
                        fi 
else
    echo -e "Directory is not present in system"
fi 

===========================================================================

17. Write a script that checks for and reports any failed SSH login attempts on a Linux server.

SOLUTION:-

#!/bin/bash 

L_FILE=/var/log/secure

if [[ -f $L_FILE ]]
then
    echo -e "\nList of failed SSH login attempts\n"
    grep "Failed" $L_FILE
else
    echo -e "File not found"
fi 

===========================================================================

18. Write a shell script that monitors a specified file for changes and executes a specific action when the file is modified.

SOLUTION:-

#!/bin/bash

F_NM=$1
MTIM=$2

if [[ $# != "2" ]]
then
    echo -e "Two argument is Require"
    echo "Usage: $0 [File Name Modified time]"
    exit
fi 

if [[ -f $F_NM ]]
then
    echo -e "File will modified on $MTIM time"
    find $F_NM -type f -mtime +$MTIM
else
    echo -e "File not found"
fi 

===========================================================================

19. Write a script that automates the process of creating a new MySQL database, user, and granting privileges.

SOLUTION:-

#!/bin/bash

PASS=$1
DB_N=$2
USR_N=$3

if [[ $# != "3" ]]
then
    echo -e "Three Argument is require"
    echo -e "Usage: $0 [Password Database name User name]"
    exit 1
fi 

dpkg --list | grep mariadb-server >/dev/null 2>&1
EXT_ST=$?

if [[ $EXT_ST == "0" ]]
then
    echo -e "package is install in system"
else
    echo -e "package is not install in system"
    apt install mariadb-server -y > /dev/null 2>&1
fi

STAT=`systemctl is-active apache2`

if [[ $STAT == "active" ]]
then
    echo -e "mariadb server  is active"
else
    echo -e "mariadb server is inactive"
    systemctl start mariadb
fi 

printf "123\n n\n n\n n\n y\n y\n y\n" | mysql_secure_installation >/dev/null 2>&1
EXTS=$?

if [[ $EXTS == "0" ]]
then
    echo -e "MySql is securely install"
    mysql -u root <<EOF
    create database $DB_N;
    create user '$USR_N'@localhost identified by 'root';
    grant all on $DB_N.* to '$USR_N' identified by 'root' ;
    show databases;
    exit
EOF
else
    echo -e "MySql is not installd securiely"
fi  

===========================================================================

20. Write a shell script that retrieves the current weather for a specified location using a weather API.

SOLUTION:-

#!/bin/bash

LOCAT=$1

if [[ $# != "1" ]]
then
    echo -e "One Argument is Require"
    echo -e "Usage: $0 [Location]"
    exit 1
fi

COMD=`curl wttr.in/$LOCAT`
EXT_ST=$?

if [[ $EXT_ST = "0" ]]
then
    echo -e "The current weather of $LOCAT is $COMD"
fi 

===========================================================================

21. Write a script that calculates the total disk space used by a specified user and outputs the result.

SOLUTION:-

USER_N=$1

if [[ $# != "1" ]]
then
    echo -e "One Argument is Require"
    echo "Usage: $0 [User Name]"
    exit 1
fi

grep $USER_N /etc/passwd
EXT_ST=$?

if [[ $EXT_ST == "0" ]]
then
    echo -e "User is present in /etc/passwd file"
    echo -e "Disk space used by $USER_N is"
    du -h -c /$USER_N
else
    echo -e "User is not present in /etc/passwd file"
    echo -e "Create user"
fi 

===========================================================================

22.Write a shell script that sends a daily summary of system logs via email.

SOLUTION:-

#!/bin/bash

EMAIL_ID=$1
DIR_N=/var/log/
FILE_N=syslog

if [[ $# != "1" ]]
then
    echo -e "One Argument is require"
    echo "Usage: $0 [EMAIL_ID]"
    exit 1
fi 

function Mail ()
{
echo -e "Hello 
            This mail is regarding a daily update of system logs.

            Summary=`tail -n 10 /var/log/syslog`
            
Thanks and Regards
XYZ"
}

if [[ -d $DIR_N ]]
then
    echo -e "Directory is present in system"
    tail -n 10 /var/log/syslog
    Mail |mail -s "Daily summary of system logs" $EMAIL_ID
else
    echo -e "Directory is not present in system"
fi 

===========================================================================

23. Write a script that performs a search and replace operation on multiple files in a directory.

SOLUTION:-

#!/bin/bash

DIR_NA=$1
OPER1=$2
OPER2=$3

if [[ $# != "3" ]]
then
    echo -e "Three argument is require"
    echo "Usage: $0 [Directory Name operation to search operation to replace with]"
    exit
fi

if [[ -d $DIR_NA ]]
then
    echo -e "Directory Exist in system"
    grep -r $OPER1 $DIR_NA/
    EXT_ST=$?
        if [[ $EXT_ST == "0" ]]
        then
            echo "Searching and Replacing operation in multiple files in a directory"
            sed -i "s/$OPER1/$OPER2/g" $DIR_NA/*
        else
            echo -e "operation not found"
        fi
else
    echo -e "Directory not found"
fi 

===========================================================================

24. Write a shell script that renames a large number of files based on a specified pattern or naming convention.

SOLUTION:-

#!/bin/bash

DIR_N=$1
PATT1=$2
PATT2=$3

if [[ $# != "3" ]]
then
    echo -e "Three Argument require"
    echo "Usage: $0 [Directory Name pattern to change pattern to change with]"
    exit
fi 

if [[ -d $DIR_N ]]
then
    echo -e "Directory Exist in system"
    cd $DIR_N
    mmv "*$PATT1*" "#1$PATT2#2"
else
    echo -e "Directory does not Exist in system"
fi 

===========================================================================

25. Write a script that generates and emails a report of newly created user accounts on a Linux system within the last 24 hours.

SOLUTION:-

#!/bin/bash

EMAIL_ID=$1
DIR_N=/home
NEW_US=`find $DIR_N -mtime -1`

if [[ $# != "1" ]]
then
    echo -e "One Argument is Require"
    echo "Usage: $0 [EMAIL_ID]"
    exit 1
fi

if [[ -d $DIR_N ]]
then
    echo -e "Directory is present"
    echo -e "Number of Users create is \n $NEW_US" |
    mail -s "$NEW_US Number of Users is created within last 24hour" $EMAIL_ID
else
    echo -e "Directory is not present"
fi

############################################################################################################